#{
# 0/1 Knapsack problem:
# https://en.wikipedia.org/wiki/Knapsack_problem
#
}#

fun main() : int = ({
    n = 9;
    limit = 20;

    ({
        i = 0;
        while i < 100 do
            j = 0;
            while j < 100 do
                MEMO_SET[i][j] = 0;
                j = j + 1;
            end;
            i = i + 1;
        end;
    } where
        var i : int;
        var j : int;
    );

    volumes[0] = 7;
    prices[0]  = 3;

    volumes[1] = 3;
    prices[1]  = 4;

    volumes[2] = 5;
    prices[2]  = 9;

    volumes[3] = 4;
    prices[3]  = 2;

    volumes[4] = 6;
    prices[4]  = 5;

    volumes[5] = 2;
    prices[5]  = 8;

    volumes[6] = 8;
    prices[6]  = 6;

    volumes[7] = 9;
    prices[7]  = 1;

    volumes[8] = 1;
    prices[8]  = 7;

    find_price(0, limit);

}where
    var MEMO : [100][100]int;
    var MEMO_SET : [100][100]int;
    var n     : int;
    var limit : int;
    var volumes : [100]int;
    var prices  : [100]int;

    fun find_price(idx : int, volume : int) : int = ({
        if (idx >= n) then
            ret = 0;
        else
            if MEMO_SET[idx][volume] then
                ret = MEMO[idx][volume];
            else
                price = find_price(idx + 1, volume);
                if volumes[idx] <= volume then
                    priceAdded = prices[idx] + find_price(idx + 1, volume - volumes[idx]);
                    if priceAdded > price then
                        price = priceAdded;
                    end;
                end;
                MEMO_SET[idx][volume] = 1;
                MEMO[idx][volume] = price;
                ret = price;
            end;
        end;
        ret;
    } where
        var price : int;
        var priceAdded : int;
        var ret : int;
    );
);