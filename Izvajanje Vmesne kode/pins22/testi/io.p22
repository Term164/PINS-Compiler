#{
#  Reads number from stdin and prints calculated Fibonacci number.
#  Input: <0 will end the program.
}#

fun main() : int = ({
    i = 0;
    while i < 1000 do
        MEMO[i] = 0;
        i = i + 1;
    end;

    i = readInt();
    while i >= 0 do
        i = fibo(i);
        printInt(i);
        putChar((10 : char));
        i = readInt();
    end;
    putChar('G');putChar('o');putChar('o');
    putChar('d');putChar('b');putChar('y');
    putChar('e');putChar('!');

    0;
}where
    var i : int;
);

#{
#  Reads int from stdin.
#  Ignores any character that is not a number.
}#
fun readInt() : int = ({
    num = 0;
    prevC = '0';
    c = getChar();

    #{ Consume until we get a number }#
    while c < '0' | c > '9' do
        prevC = c;
        c = getChar();
    end;

    sign = 0;
    if prevC == '-' then
        sign = 1;
    end;

    #{ Parse number }#
    while c >= '0' & c <= '9' do
        num = num * 10 + ((c : int) - ('0' : int));
        c = getChar();
    end;

    if sign then
        num = -num;
    end;
    num;
} where
    var c : char;
    var prevC : char;
    var num : int;
    var sign : int;
);

#{
#  Writes int to stdout.
}#
fun printInt(num : int) : void = ({
    rev = 0;
    numZeros = 0;
    #{ Handle signedness }#
    if num < 0 then
        num = -num;
        putChar('-');
    else
        if num == 0 then
            numZeros = 1;
        end;
    end;

    #{ Reverse number }#
    while num do
        rev = rev * 10;
        rev = rev + (num % 10);
        num = num / 10;
        numZeros = numZeros + 1;
    end;

    #{ Print reversed }#
    while rev do
        c = (rev % 10) + ('0' : int);
        putChar((c : char));
        rev = rev / 10;
        numZeros = numZeros - 1;
    end;

    #{ Print trailing zeros }#
    while numZeros do
        putChar('0');
        numZeros = numZeros - 1;
    end;

} where
    var c : int;
    var rev : int;
    var numZeros : int;
);

fun fibo(i : int) : int = ({
    if MEMO[i] then
        res = MEMO[i];
    else
        if i >= 2 then
            res = fibo(i - 1) + fibo(i - 2);
            MEMO[i] = res;
        else
            res = i;
        end;
        MEMO[i] = res;
    end;
    res;
}
where
        var res : int;
);
var MEMO : [1000]int;

#{ Forward declaring }#
fun putChar(c : char) : void = none;
fun getChar() : char = (0 : char);
