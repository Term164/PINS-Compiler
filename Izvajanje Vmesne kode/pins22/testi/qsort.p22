#{
#  Reads 'n' numbers, sorts them and prints them.
}#

fun main() : int = ({
    putChar('N');putChar('?');putChar(' ');
    n = readInt();
    nums = ((new (n * 8)) : ^int);

    i = 0;
    while i < n do
        getIdx(nums, i)^ = readInt();
        i = i + 1;
    end;

    putChar((10 : char));
    putChar('S');putChar('o');putChar('r');
    putChar('t');putChar('e');putChar('d');
    putChar(':');putChar((10 : char));
    qsort(nums, n);
    printNums(nums, n);
    del (nums : ^void);

    0;
}where
    var i : int;
    var n : int;
    var nums : ^int;
    fun getIdx(arr : ^int, idx : int) : ^int = (((arr : int) + idx * 8) : ^int);
    fun printNums(arr : ^int, n : int) : void = ({
        printInt(getIdx(arr, 0)^);
        i = 1;
        while i < n do
            putChar(',');putChar(' ');
            printInt(getIdx(arr, i)^);
            i = i + 1;
        end;
        putChar((10 : char));
    } where
        var i : int;
    );
);

#{
#  Quick sort.
}#
fun qsort(arr : ^int, n : int) : void = ( qsort(arr, 0, n - 1) where
    fun partition(arr : ^int, left : int, right : int) : int = ({
        p = getIdx(arr, (left + right) / 2)^;
        l = left - 1;
        r = right + 1;
        cond = 1;
        while cond do
            l = l + 1;
            while getIdx(arr, l)^ < p do
                l = l + 1;
            end;
            r = r - 1;
            while getIdx(arr, r)^ > p do
                r = r - 1;
            end;

            cond = !(l >= r);
            if cond then
                swap(l, r);
            end;
        end;


        r;
    } where
        var p : int;
        var l : int;
        var r : int;
        var c : int;
        var cond : int;
        fun swap(a : int, b : int) : void = ({
            t = getIdx(arr, a)^;
            getIdx(arr, a)^ = getIdx(arr, b)^;
            getIdx(arr, b)^ = t;
        } where
            var t : int;
        );
    );
    fun qsort(arr : ^int, left : int, right : int) : void = ({
        if left < right then
            r = partition(arr, left, right);
            qsort(arr, left, r);
            qsort(arr, r + 1, right);
        end;
    } where
        var r : int;
    );
    fun getIdx(arr : ^int, idx : int) : ^int = (((arr : int) + 8 * idx) : ^int);
);


#{
#  Reads int from stdin.
#  Ignores any character that is not a number.
}#
fun readInt() : int = ({
    num = 0;
    prevC = '0';
    c = getChar();

    #{ Consume until we get a number }#
    while c < '0' | c > '9' do
        prevC = c;
        c = getChar();
    end;

    sign = 0;
    if prevC == '-' then
        sign = 1;
    end;

    #{ Parse number }#
    while c >= '0' & c <= '9' do
        num = num * 10 + ((c : int) - ('0' : int));
        c = getChar();
    end;

    if sign then
        num = -num;
    end;
    num;
} where
    var c : char;
    var prevC : char;
    var num : int;
    var sign : int;
);

#{
#  Writes int to stdout.
}#
fun printInt(num : int) : void = ({
    rev = 0;
    numZeros = 0;
    #{ Handle signedness }#
    if num < 0 then
        num = -num;
        putChar('-');
    else
        if num == 0 then
            numZeros = 1;
        end;
    end;

    #{ Reverse number }#
    while num do
        rev = rev * 10;
        rev = rev + (num % 10);
        num = num / 10;
        numZeros = numZeros + 1;
    end;

    #{ Print reversed }#
    while rev do
        c = (rev % 10) + ('0' : int);
        putChar((c : char));
        rev = rev / 10;
        numZeros = numZeros - 1;
    end;

    #{ Print trailing zeros }#
    while numZeros do
        putChar('0');
        numZeros = numZeros - 1;
    end;

} where
    var c : int;
    var rev : int;
    var numZeros : int;
);

#{ Forward declaring }#
fun putChar(c : char) : void = none;
fun getChar() : char = (0 : char);
