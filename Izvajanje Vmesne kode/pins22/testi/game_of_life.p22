typ BOARD = [25][25]int;
var SIZE : int;

fun main() : void = ({
    SIZE = 25;

    curBoard = (^board : ^int);
    prevBoard = (^auxBoard : ^int);

    clearBoard(curBoard);
    clearBoard(prevBoard);

    i = 0;
    while i < SIZE do
        j = 0;
        while j < SIZE do
            getCell(prevBoard, i, j)^ = !(random() % 2);
            j = j + 1;
        end;
        i = i + 1;
    end;

    #{
    auxBoard[4][5] = 1;
    auxBoard[4][4] = 1;
    auxBoard[4][6] = 1;
    }#

    i = 0;
    while i < 100 do
        #{ Step simulation }#
        stepGame(curBoard, prevBoard);

        drawBoard(prevBoard);
        putChar((10 : char));
        putChar((10 : char));

        sleep(500);
        i = i + 1;

        #{ Swap boards }#
        t = curBoard;
        curBoard = prevBoard;
        prevBoard = t;
    end;
    none;
} where
    var board : BOARD;
    var auxBoard : BOARD;
    var curBoard : ^int;
    var prevBoard : ^int;

    var i : int;
    var j : int;
    var t : ^int;
);

fun getCell(ppArr : ^int, i : int, j : int) : ^int = (((ppArr : int) + i * (SIZE * 8) + j * 8) : ^int);
fun clearBoard(board : ^int) : void= ({
    i = 0;
    while i < SIZE do
        j = 0;
        while j < SIZE do
            getCell(board, i, j)^ = 0;
            j = j + 1;
        end;
        i = i + 1;
    end;
} where
    var i : int;
    var j : int;
);


fun stepGame(front : ^int, back : ^int) : void = ({
    clearBoard(front);

    i = 0;
    while i < SIZE do
        j = 0;
        while j < SIZE do
            numAlive = countNeighbours(back, i, j);
            if getCell(back, i, j)^ & (numAlive == 2 | numAlive == 3) then
                getCell(front, i, j)^ = 1;
            end;
            if !(getCell(back, i, j)^) & numAlive == 3 then
                getCell(front, i, j)^ = 1;
            end;

            #{putChar(((numAlive + ('0' : int)) : char));}#

            j = j + 1;
        end;
        i = i + 1;
    end;
    none;
} where
    var i : int;
    var j : int;
    var numAlive : int;


);

fun countNeighbours(board : ^int, i : int, j : int) : int = ({
        count = 0;
        x = i - 1;
        while x <= i + 1 do
            y = j - 1;
            while y <= j + 1 do
                #{ Check, if withing range }#
                if x >= 0 & x < SIZE & y >= 0 & y < SIZE then
                    count = count + !(getCell(board, x, y)^);
                end;
                y = y + 1;
            end;
            x = x + 1;
        end;
        #{
        # Subtracting cell itself from neighbours
        # using double negation trick to only subtract
        # either 0 or 1.
        #
        }#
        count = count - !(getCell(board, i, j)^);
        count;
    } where
        var count : int;
        var x : int;
        var y : int;
    );

fun drawBoard(board : ^int) : void = ({
    i = 0;

    while i < SIZE do
        j = 0;
        while j < SIZE do
            cell = getCell(board, i, j)^;
            if cell then
                putChar('#');
            else
                putChar(' ');
            end;
            j = j + 1;
        end;
        putChar((10 : char));
        i = i + 1;
    end;
} where
    var i : int;
    var j : int;
    var cell : int;
);

fun sleep(delta : int) : void = {
    while delta > 0 do
        ({
            delta = delta - 1;
            i = 1000;
            while i > 0 do
                12 * 32 / 2;
                i = i - 1;
            end;
        } where var i : int;
        );
    end;
};


#{
# Calculates Pseudo-random number using
# linear congruential generator method.
#
}#
fun random() : int = {
    seed = (seed * 16807 + 12345) % 2147483647;
    seed;
};

#{ Leaving it uninitialized to get starting "random" seed }#
var seed : int;

#{ Forward declaring }#
fun putChar(c : char) : void = none;
fun getChar() : int = 0;
